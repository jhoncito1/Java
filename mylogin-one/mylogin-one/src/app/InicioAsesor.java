/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import net.sf.jcarrierpigeon.Notification;
import net.sf.jcarrierpigeon.NotificationQueue;
import net.sf.jcarrierpigeon.WindowPosition;

/**
 *
 * @author RONNY.SOTILLET
 */
public class InicioAsesor extends javax.swing.JFrame implements Runnable {

    Db cc = new Db();
    Connection con = (Connection) cc.connect();
    
    int posx, posy;
    String nombre;
    public static int idUser;
    public static int camp;

    public InicioAsesor() {
        initComponents();
        
        try {
            this.setBackground(new Color(255, 0, 0, 0));
        } catch (Exception e) {

        }
        setIconImage(new ImageIcon(getClass().getResource("/assets/ojo-01-02.png")).getImage());
        
    }

    public InicioAsesor(String nombre, int camp) {
        initComponents();
        //txaConversacionAsesor.setLineWrap(true);
        this.nombre = nombre;
        InicioAsesor.camp = camp;
        txaConversacionAsesor.setLineWrap(true);
        try {
            this.setBackground(new Color(255, 0, 0, 0));
        } catch (Exception e) {

        }
        setIconImage(new ImageIcon(getClass().getResource("/assets/ojo-01-02.png")).getImage());
        setLocationRelativeTo(null);
        Thread hiloAsesor = new Thread(this);
        hiloAsesor.start();
        setCoor();
        
        mostrarMensajes();
    }

    void sendNotifi(String msg) {
        notification j = new notification(msg);
        NotificationQueue val = new NotificationQueue();
        Notification obj = new Notification(j, WindowPosition.BOTTOMRIGHT, 0, 0, 10000);
        val.add(obj);
    }

    void setCoor() {
        DefaultListModel<String> model = new DefaultListModel<>();
        try {
            Connection con = Db.connect();
            Statement s = con.createStatement();
            ResultSet r = s.executeQuery("select * from usuarios WHERE nivel = 1 and campana = '" + camp + "' and estado = 1");
            while (r.next()) {
                model.addElement(r.getString("nombreUsuario"));
            }
            listaCordinadorAs.setModel(model);
            listaCordinadorAs.setSelectedIndex(0);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

    }

    int getIDCamp(String name) {
        try {
            Connection con = Db.connect();
            Statement s = con.createStatement();
            ResultSet r = s.executeQuery("select * from campana WHERE nombreCampana='" + name + "'");
            while (r.next()) {
                return r.getInt("idcampana");
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnSalir = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btnBorrar = new javax.swing.JButton();
        btnEnviar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaConversacionAsesor = new javax.swing.JTextArea();
        jLbCerrar = new javax.swing.JLabel();
        jLbMinimizar = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaCordinadorAs = new javax.swing.JList<>();
        txtEscribeAsesor = new javax.swing.JTextField();
        lblFondo = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txpConversacionAsesor = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Coordinador");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 120, 30));

        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 30, 30));

        btnSalir.setBackground(new java.awt.Color(5, 78, 142));
        btnSalir.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSalir.setForeground(new java.awt.Color(255, 255, 255));
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 90, 40));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Mensaje");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 200, 20));

        btnBorrar.setBackground(new java.awt.Color(5, 78, 142));
        btnBorrar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBorrar.setForeground(new java.awt.Color(255, 255, 255));
        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 270, 80, 30));

        btnEnviar.setBackground(new java.awt.Color(5, 78, 142));
        btnEnviar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEnviar.setForeground(new java.awt.Color(255, 255, 255));
        btnEnviar.setText("Enviar");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEnviar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 270, 80, 30));

        txaConversacionAsesor.setEditable(false);
        txaConversacionAsesor.setColumns(10);
        txaConversacionAsesor.setRows(5);
        txaConversacionAsesor.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txaConversacionAsesor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txaConversacionAsesorKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txaConversacionAsesor);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 230, 160));

        jLbCerrar.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLbCerrar.setText("X");
        jLbCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLbCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLbCerrarMouseClicked(evt);
            }
        });
        getContentPane().add(jLbCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, 20, 20));

        jLbMinimizar.setFont(new java.awt.Font("Showcard Gothic", 0, 18)); // NOI18N
        jLbMinimizar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLbMinimizar.setText("_");
        jLbMinimizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLbMinimizarMouseClicked(evt);
            }
        });
        getContentPane().add(jLbMinimizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, 20, -1));

        listaCordinadorAs.setBackground(new java.awt.Color(5, 78, 142));
        listaCordinadorAs.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaCordinadorAsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listaCordinadorAs);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 110, 160));

        txtEscribeAsesor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEscribeAsesorKeyPressed(evt);
            }
        });
        getContentPane().add(txtEscribeAsesor, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 230, 230, -1));

        lblFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/fondo15.png"))); // NOI18N
        lblFondo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                lblFondoMouseDragged(evt);
            }
        });
        lblFondo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblFondoMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblFondoMousePressed(evt);
            }
        });
        getContentPane().add(lblFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 430, 340));

        txpConversacionAsesor.setEditable(false);
        txpConversacionAsesor.setBackground(new java.awt.Color(51, 255, 204));
        txpConversacionAsesor.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txpConversacionAsesor.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jScrollPane3.setViewportView(txpConversacionAsesor);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 350, 230, 140));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        this.dispose();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        LoginForm ini = new LoginForm();
        this.dispose();
        ini.setVisible(true);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        txaConversacionAsesor.setText("");
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        guardarMensajes();
        enviarMensajes();
    }//GEN-LAST:event_btnEnviarActionPerformed

    private void txaConversacionAsesorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txaConversacionAsesorKeyTyped
        if (txaConversacionAsesor.getText().length() == 200) {
            evt.consume();
        }

    }//GEN-LAST:event_txaConversacionAsesorKeyTyped

    private void lblFondoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblFondoMousePressed
        posx = evt.getX();
        posy = evt.getY();
    }//GEN-LAST:event_lblFondoMousePressed

    private void lblFondoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblFondoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_lblFondoMouseClicked

    private void lblFondoMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblFondoMouseDragged
        int xp = evt.getXOnScreen() - posx;
        int yp = evt.getYOnScreen() - posy;
        this.setLocation(xp, yp);
    }//GEN-LAST:event_lblFondoMouseDragged

    private void jLbCerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLbCerrarMouseClicked
        this.dispose();
    }//GEN-LAST:event_jLbCerrarMouseClicked

    private void jLbMinimizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLbMinimizarMouseClicked
        setExtendedState(JFrame.CROSSHAIR_CURSOR);
    }//GEN-LAST:event_jLbMinimizarMouseClicked

    private void txtEscribeAsesorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEscribeAsesorKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            guardarMensajes();
            enviarMensajes();
        }
    }//GEN-LAST:event_txtEscribeAsesorKeyPressed

    private void listaCordinadorAsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaCordinadorAsValueChanged
        int select = listaCordinadorAs.getSelectedIndex();
        DefaultListModel<String> modell = new DefaultListModel<>();
        if (select > 0) {
            try {
                com.mysql.jdbc.Connection con = (com.mysql.jdbc.Connection) Db.connect();
                Statement s;
                s = con.createStatement();
                ResultSet r = s.executeQuery("SELECT * FROM usuarios WHERE campana ='" + select + "'and estado = 1;");
                while (r.next()) {
                    modell.addElement(r.getString("nombreUsuario"));
                }
                listaCordinadorAs.setModel(modell);
            } catch (SQLException e) {
            }
        } 
        else{
        } 
    }//GEN-LAST:event_listaCordinadorAsValueChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
//        try {
//            Socket misocket = new Socket("192.168.250.211",9000);
//            paqueteEnvio datos = new paqueteEnvio();
//            datos.setNombre(nombre);
//            datos.setMensaje("online");
//            ObjectOutputStream paqueteDatos = new ObjectOutputStream(misocket.getOutputStream());
//            paqueteDatos.writeObject(datos);
//            misocket.close();
//        } catch (Exception e) {
//        }
    }//GEN-LAST:event_formWindowOpened

//    public void mensajeria(String msg){
//        msg = txtEscribeAsesor.getText();
//        this.txaConversacionAsesor.append(" "+msg+"\n");
//    }
    
    public void enviarMensajes() {
        try {
            try (Socket misocket = new Socket("192.168.250.211", 9000)) {
                paqueteEnvio datos = new paqueteEnvio();
                if (listaCordinadorAs.getSelectedValue().equals("TODOS")) {
                    datos.setCamp("0");
                } else {

                    datos.setCamp(String.valueOf(getIDCamp(listaCordinadorAs.getSelectedValue())));
                }
                datos.setNombre(nombre);
                datos.setMensaje(txtEscribeAsesor.getText());
                datos.setIp("1");
                DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
                Date dat = new Date();
                String date = dateFormat.format(dat);
                //datos.setFecha(date);
                ObjectOutputStream paqueteDatos = new ObjectOutputStream(misocket.getOutputStream());
                paqueteDatos.writeObject(datos);
                
                //txpConversacionAsesor.setText(datos.getNombre()+": \n "+datos.getMensaje()+"\n"+date+"\n\n");
                txaConversacionAsesor.append(datos.getNombre()+": \n "+datos.getMensaje()+"\n"+date+"\n\n");
                
                misocket.close();
            }
            txtEscribeAsesor.setText("");

        } catch (IOException e) {
        }
        //sendNotifi();
    }

    public void guardarMensajes() {
        try {

            String SQL = "insert into mensajes (mensajes, usuarioEnvia, fechaMensaje) values (?,?,?)";
            PreparedStatement pst = con.prepareStatement(SQL);
            

            pst.setString(1, txtEscribeAsesor.getText());
            pst.setString(2, LoginForm.dt);
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = new Date();
            pst.setString(3, (dateFormat.format(date)));

            pst.execute();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error de Registro de mensajes " + e.getMessage());
        }
    }
    
    
    public void mostrarMensajes(){
        LoginForm lg = new LoginForm();
        //String SQL = "SELECT mensajes FROM chatinterno.mensajes where usuarioEnvia = '"+lg.dt+"'";
        String SQL = "SELECT usuarioEnvia, mensajes, fechaMensaje FROM chatinterno.mensajes where (usuarioEnvia = '" + LoginForm.u_id 
                + "' and usuarioRecibe = 'juan.toja')or(usuarioEnvia = 'juan.toja' and usuarioRecibe = '" + LoginForm.u_id + "')";

        try {
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(SQL);
            while (rs.next()) {
                String nombre = rs.getString(1);
                String msn = rs.getString(2);
                String date = rs.getString(3);
                //txpConversacionAsesor.getStyledDocument().insertString(txpConversacionAsesor.getStyledDocument().getLength(), txpConversacionAsesor.getText(),simp);
                //txpConversacionAsesor.setText(nombre + ":\n" + msn + "\n"+ date+"\n\n");
                txaConversacionAsesor.append(nombre + ":\n" + msn + "\n"+ date+"\n\n");
            }
          //pst.execute();
        } 
        catch (SQLException e) {
            JOptionPane.showMessageDialog(null,"Error en carga de mensajes "+ e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InicioAsesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InicioAsesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InicioAsesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InicioAsesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new InicioAsesor().setVisible(true);
            }
        });
    }

    @Override
    public void run() {
        //mostrarMensajes();
        try {
//            try (Socket misocket = new Socket("192.168.250.211", 9000)) {
//                paqueteEnvio datos = new paqueteEnvio();
//                datos.setCamp(String.valueOf(camp));
//                datos.setNombre(nombre);
//                
//                
//                
//                InetAddress inet = InetAddress.getLocalHost();
//                String ip = inet.getHostAddress();
//                datos.setIp(ip);
//                System.out.println(ip);
//                
//                
//                
//                
//                ObjectOutputStream paqueteDatos = new ObjectOutputStream(misocket.getOutputStream());
//                paqueteDatos.writeObject(datos);
//            }
            ServerSocket servidor_cliente = new ServerSocket(9090);
            Socket cliente;
            paqueteEnvio paqueteRecibido;
            while (true) {
                cliente = servidor_cliente.accept();
                ObjectInputStream flujoEntrada = new ObjectInputStream(cliente.getInputStream());
                paqueteRecibido = (paqueteEnvio) flujoEntrada.readObject();
                if (paqueteRecibido.getCamp().equals(String.valueOf(camp)) || paqueteRecibido.getCamp().equals("0")) {
                    txaConversacionAsesor.append(paqueteRecibido.getNombre()+"\n"+ paqueteRecibido.getMensaje()+"\n\n");
//                    String text_actual = txaConversacionAsesor.getText();
//                    String text_nuevo = txtEscribeAsesor.getText();
//                    txpConversacionAsesor.setText(text_actual + text_nuevo);
                    //sendNotifi(paqueteRecibido.getMensaje());
                }
                //txaConversacionAsesor.setText(paqueteRecibido.getMensaje());
            }
        } catch (IOException | ClassNotFoundException e) {
            
            System.out.println(e.getMessage());
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLbCerrar;
    private javax.swing.JLabel jLbMinimizar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JList<String> listaCordinadorAs;
    private javax.swing.JTextArea txaConversacionAsesor;
    private javax.swing.JTextPane txpConversacionAsesor;
    private javax.swing.JTextField txtEscribeAsesor;
    // End of variables declaration//GEN-END:variables
}
